<template>
  <!-- template里只能有一个根节点 -->
  <div class="column">
    <div class="list" style="transform: translateY({{scrollY}}px)">
      <div id="item" class="item"></div>
      <div class="item"></div>
      <div class="item"></div>
      <div class="item" for="item in range">
        <text class="desc">{{item[key]}}</text>
      </div>
      <div class="item"></div>
      <div class="item"></div>
      <div class="item"></div>
    </div>
    <div class="mask"
         @touchmove="touchmove"
         @touchend="touchend"
         @touchstart="touchstart">
      <div class="line1"></div>
      <div class="line2"></div>
    </div>
  </div>
</template>

<script>
export default {
  props: ['range', 'locked', 'key', 'index', 'current'],
  // 页面级组件的数据模型，影响传入数据的覆盖机制：private内定义的属性不允许被覆盖
  data: {
    scrollY: 0,
    lastMoveTime: 0,
    distance: 0
  },
  computed: {
    scrollDis() {
      return `translateY(${this.scrollY}px)`
    }
  },
  onInit() {
    this.touch = {
      scrollY: 0
    }
    let index = this.range.findIndex(item => item[this.key] === this.current[this.key])
    this.scrollY = -index * 60
    // console.log(this.range)
  },
  touchstart(e) {
    this.$dispatch('changeScroll', {index: this.index})
    this.touch.initiated = true
    this.lastMoveTime = Date.now()
    this.touch.startY = e.touches[0].pageY
  },
  touchmove(e) {
    if (!this.touch.initiated) return
    if (this.locked) return
    let y = this.touch.scrollY + e.touches[0].pageY - this.touch.startY
    this.distance = e.touches[0].pageY - this.touch.startY
    if (y > 0 || y < -(this.range.length * 60 - 60)) return
    this.scrollY = y
  },
  touchend(e) {
    this.touch.initiated = false
    this.touch.scrollY = this.scrollY
    let time = Date.now() - this.lastMoveTime
    if (time <= 100 && time > 0) {
      this.fastTouch(Date.now() - this.lastMoveTime)
      return
    }
    this.finish()
  },
  finish () {
    let num = Math.round(this.scrollY / 60)
    this.scrollY = num * 60
    this.touch.scrollY = this.scrollY
    this.$dispatch('columnChangeFinish', {index: this.index, item: this.range[Math.abs(num)]})
  },
  fastTouch (time) {
    let speed = this.distance / (time * (1000 / 60)) * 400
    let timer = setInterval(() => {
      speed *= 0.95
      let y = this.scrollY + speed
      if (Math.abs(speed) < 1 || y > 0 || y < -(this.range.length * 60 - 60)) {
        clearInterval(timer)
        this.touch.scrollY = this.scrollY
        this.finish()
        return
      }
      this.scrollY = y
    }, 16)
  }
}
</script>

<style>
  .column {
    flex: 1;
    height: 420px;
  }
  .list {
    flex-direction: column;
    height: 2400px;
  }
  .item {
    height: 60px;
  }
  .desc {
    width: 100%;
    text-align: center;
  }
  .mask {
    position: absolute;
    width: 100%;
    height: 420px;
    left: 0;
    bottom: 0;
    background: linear-gradient(0deg, rgba(255, 255, 255, 0.98), rgba(255, 255, 255, 0.65) 186px, transparent 188px, transparent 244px, rgba(255, 255, 255, 0.65) 246px, rgba(255, 255, 255, 0.98));
  }
  .line1 {
    position: absolute;
    top: 180px;
    height: 2px;
    width: 100%;
    background-color: #ccc;
  }
  .line2 {
    position: absolute;
    top: 240px;
    height: 2px;
    width: 100%;
    background-color: #ccc;
  }
</style>
